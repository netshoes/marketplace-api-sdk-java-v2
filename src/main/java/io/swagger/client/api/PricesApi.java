/*
 * API Marketplace Grupo Netshoes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Body3;
import io.swagger.client.model.Body4;
import io.swagger.client.model.InlineResponse2002;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PricesApi {
    private ApiClient apiClient;

    public PricesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PricesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getPriceProductBySku */
    private com.squareup.okhttp.Call getPriceProductBySkuCall(String clientId, String accessToken, String sku, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/products/{sku}/prices".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "sku" + "\\}", apiClient.escapeString(sku.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "access_token", "client_id" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPriceProductBySkuValidateBeforeCall(String clientId, String accessToken, String sku, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getPriceProductBySku(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getPriceProductBySku(Async)");
        }
        
        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling getPriceProductBySku(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPriceProductBySkuCall(clientId, accessToken, sku, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get price of the product
     * Returns the current list and sale prices of the searched product.
     * @param clientId The APP Token used to authenticate. (required)
     * @param accessToken The Access Token used to authenticate. (required)
     * @param sku Product&#39;s Sku (required)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 getPriceProductBySku(String clientId, String accessToken, String sku) throws ApiException {
        ApiResponse<InlineResponse2002> resp = getPriceProductBySkuWithHttpInfo(clientId, accessToken, sku);
        return resp.getData();
    }

    /**
     * Get price of the product
     * Returns the current list and sale prices of the searched product.
     * @param clientId The APP Token used to authenticate. (required)
     * @param accessToken The Access Token used to authenticate. (required)
     * @param sku Product&#39;s Sku (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> getPriceProductBySkuWithHttpInfo(String clientId, String accessToken, String sku) throws ApiException {
        com.squareup.okhttp.Call call = getPriceProductBySkuValidateBeforeCall(clientId, accessToken, sku, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get price of the product (asynchronously)
     * Returns the current list and sale prices of the searched product.
     * @param clientId The APP Token used to authenticate. (required)
     * @param accessToken The Access Token used to authenticate. (required)
     * @param sku Product&#39;s Sku (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPriceProductBySkuAsync(String clientId, String accessToken, String sku, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPriceProductBySkuValidateBeforeCall(clientId, accessToken, sku, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for savePriceProductBySku */
    private com.squareup.okhttp.Call savePriceProductBySkuCall(String clientId, String accessToken, String sku, Body4 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/products/{sku}/prices".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "sku" + "\\}", apiClient.escapeString(sku.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "access_token", "client_id" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call savePriceProductBySkuValidateBeforeCall(String clientId, String accessToken, String sku, Body4 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling savePriceProductBySku(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling savePriceProductBySku(Async)");
        }
        
        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling savePriceProductBySku(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling savePriceProductBySku(Async)");
        }
        
        
        com.squareup.okhttp.Call call = savePriceProductBySkuCall(clientId, accessToken, sku, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Save a newly created price of the product
     * Saves a new list and/or sale price of a product with no previous price set.
     * @param clientId The APP Token used to authenticate. (required)
     * @param accessToken The Access Token used to authenticate. (required)
     * @param sku Product&#39;s Sku (required)
     * @param body Json to send a price value. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void savePriceProductBySku(String clientId, String accessToken, String sku, Body4 body) throws ApiException {
        savePriceProductBySkuWithHttpInfo(clientId, accessToken, sku, body);
    }

    /**
     * Save a newly created price of the product
     * Saves a new list and/or sale price of a product with no previous price set.
     * @param clientId The APP Token used to authenticate. (required)
     * @param accessToken The Access Token used to authenticate. (required)
     * @param sku Product&#39;s Sku (required)
     * @param body Json to send a price value. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> savePriceProductBySkuWithHttpInfo(String clientId, String accessToken, String sku, Body4 body) throws ApiException {
        com.squareup.okhttp.Call call = savePriceProductBySkuValidateBeforeCall(clientId, accessToken, sku, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save a newly created price of the product (asynchronously)
     * Saves a new list and/or sale price of a product with no previous price set.
     * @param clientId The APP Token used to authenticate. (required)
     * @param accessToken The Access Token used to authenticate. (required)
     * @param sku Product&#39;s Sku (required)
     * @param body Json to send a price value. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call savePriceProductBySkuAsync(String clientId, String accessToken, String sku, Body4 body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = savePriceProductBySkuValidateBeforeCall(clientId, accessToken, sku, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updatePriceProductBySku */
    private com.squareup.okhttp.Call updatePriceProductBySkuCall(String clientId, String accessToken, String sku, Body3 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/products/{sku}/prices".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "sku" + "\\}", apiClient.escapeString(sku.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (accessToken != null)
        localVarHeaderParams.put("access_token", apiClient.parameterToString(accessToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "access_token", "client_id" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePriceProductBySkuValidateBeforeCall(String clientId, String accessToken, String sku, Body3 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updatePriceProductBySku(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling updatePriceProductBySku(Async)");
        }
        
        // verify the required parameter 'sku' is set
        if (sku == null) {
            throw new ApiException("Missing the required parameter 'sku' when calling updatePriceProductBySku(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePriceProductBySku(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updatePriceProductBySkuCall(clientId, accessToken, sku, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update price of the product
     * Updates the list and/or sale price of the product.
     * @param clientId The APP Token used to authenticate. (required)
     * @param accessToken The Access Token used to authenticate. (required)
     * @param sku Product&#39;s Sku (required)
     * @param body Json to send a price value. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePriceProductBySku(String clientId, String accessToken, String sku, Body3 body) throws ApiException {
        updatePriceProductBySkuWithHttpInfo(clientId, accessToken, sku, body);
    }

    /**
     * Update price of the product
     * Updates the list and/or sale price of the product.
     * @param clientId The APP Token used to authenticate. (required)
     * @param accessToken The Access Token used to authenticate. (required)
     * @param sku Product&#39;s Sku (required)
     * @param body Json to send a price value. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePriceProductBySkuWithHttpInfo(String clientId, String accessToken, String sku, Body3 body) throws ApiException {
        com.squareup.okhttp.Call call = updatePriceProductBySkuValidateBeforeCall(clientId, accessToken, sku, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update price of the product (asynchronously)
     * Updates the list and/or sale price of the product.
     * @param clientId The APP Token used to authenticate. (required)
     * @param accessToken The Access Token used to authenticate. (required)
     * @param sku Product&#39;s Sku (required)
     * @param body Json to send a price value. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePriceProductBySkuAsync(String clientId, String accessToken, String sku, Body3 body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePriceProductBySkuValidateBeforeCall(clientId, accessToken, sku, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
